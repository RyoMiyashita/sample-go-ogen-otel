// Code generated by ogen, DO NOT EDIT.

package logo

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateLogo implements createLogo operation.
	//
	// Create a new logo.
	//
	// POST /logos
	CreateLogo(ctx context.Context, req *LogoCreate) error
	// GetLogoList implements getLogoList operation.
	//
	// Get collections of logos.
	//
	// GET /logos
	GetLogoList(ctx context.Context, params GetLogoListParams) (*LogoSearchResult, error)
	// GetToken implements getToken operation.
	//
	// Get a token.
	//
	// POST /token
	GetToken(ctx context.Context, req *TokenRequest) (*TokenResponse, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
